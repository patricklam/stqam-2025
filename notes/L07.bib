@inproceedings{king75,
author = {King, James C.},
title = {A new approach to program testing},
year = 1975,
isbn = 9781450373852,
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800027.808444},
doi = {10.1145/800027.808444},
abstract = {The current approach for testing a program is, in principle, quite primitive. Some small sample of the data that a program is expected to handle is presented to the program. If the program produces correct results for the sample, it is assumed to be correct. Much current work focuses on the question of how to choose this sample. We propose that a program can be more effectively tested by executing it "symbolically." Instead of supplying specific constants as input values to a program being tested, one supplies symbols. The normal computational definitions for the basic operations performed by a program can be expanded to accept symbolic inputs and produce symbolic formulae as output. If the flow of control in the program is completely independent of its input parameters, then all output values can be symbolically computed as formulae over the symbolic inputs and examined for correctness. When the control flow of the program is input dependent, a case analysis can be performed producing output formulae for each class of inputs determined by the control flow dependencies. Using these ideas, we have designed and implemented an interactive debugging/testing system called EFFIGY.},
booktitle = {Proceedings of the International Conference on Reliable Software},
pages = {228–233},
numpages = 6,
keywords = {Symbolic interpretation, Symbolic execution, Program verification, Program testing, Program correctness},
location = {Los Angeles, California}
}

  
@inproceedings{boyer75:_selec,
author = {Boyer, Robert S. and Elspas, Bernard and Levitt, Karl N.},
title = {{SELECT}—a formal system for testing and debugging programs by symbolic execution},
year = 1975,
isbn = 9781450373852,
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800027.808445},
doi = {10.1145/800027.808445},
abstract = {SELECT is an experimental system for assisting in the formal systematic debugging of programs. It is intended to be a compromise between an automated program proving system and the current ad hoc debugging practice, and is similar to a system being developed by King et al. of IBM. SELECT systematically handles the paths of programs written in a LISP subset that includes arrays. For each execution path SELECT returns simplified conditions on input variables that cause the path to be executed, and simplified symbolic values for program variables at the path output. For conditions which form a system of linear equalities and inequalities SELECT will return input variable values that can serve as sample test data. The user can insert constraint conditions, at any point in the program including the output, in the form of symbolically executable assertions. These conditions can induce the system to select test data in user-specified regions. SELECT can also determine if the path is correct with respect to an output assertion. We present four examples demonstrating the various modes of system operation and their effectiveness in finding bugs. In some examples, SELECT was successful in automatically finding useful test data. In others, user interaction was required in the form of output assertions. SELECT appears to be a useful tool for rapidly revealing program errors, but for the future there is a need to expand its expressive and deductive power.},
booktitle = {Proceedings of the International Conference on Reliable Software},
pages = {234–245},
numpages = 12,
keywords = {Test data generation, Symbolic execution, Solution of systems of inequalities, Program verification, Program testing, Program debugging},
location = {Los Angeles, California}
}

  



  

