# W01, L1: Introduction

* what's a software failure?
* examples from daily life
* big famous examples

* thesis of this course
* the verification spectrum

* how do we know there's a bug? (validation, and vs verification)
* RIP model (mention almost in passing)

https://www.fuzzingbook.org/html/Intro_Testing.html

# W01, L2 (Jan 8)

* why tests?
* how can we proactively find bugs? exploratory testing (old L05)

* regressions / move fast & break things
* automatic testing: writing unit tests
* structure of a test/self-checking
* state vs behaviour; mock objects
* flaky tests

# W02, L3 (Jan 13)

Evaluating your tests:

* coverage, black-box, white-box, CFGs, notion of infeasibility
* fuzzing

https://www.fuzzingbook.org/html/Fuzzer.html

# W02, L4 (Jan 15)

Evaluating your tests II:

* mutation-based fuzzing

(on Jan 13 finished slide 10, though should probably do another mutation example)

https://www.fuzzingbook.org/html/MutationFuzzer.html

* what makes a good test suite
* mutation analysis

https://www.fuzzingbook.org/html/MutationAnalysis.html

(we'll return to fuzzing in 2 months)

# W03, L5 (Jan 20)

Operational semantics (old W02 slides)

AddressSanitizer (e.g. shadow memory)

## L6

L05b op sem example

Symbolic execution (old W05)

* collect path conditions, use z3 to find how to enter
* symbolic states


# W04 (Jan 27, 29)

Z3 and SMT
https://stackoverflow.com/questions/16422018/how-incremental-solving-works-in-z3

Dynamic symbolic execution: DART and EXE (old W06)
Concretization

Semantics of symbolic execution (W06 notes)


# W05 (Feb 3, 5)

Hoare Logic
Dafny
- write preconditions, postconditions, invariants

# W06 (Feb 10, 12)

Dafny

quiz 1

# W07 (Feb 24, 26)

Dafny

# W08 (Mar 3, 5)

# W09 (Mar 10, 12)

Bounded model checking
CBMC/Kani
https://github.com/model-checking/verify-rust-std/issues/213#issuecomment-2531006855

quiz 2

# W10 (Mar 17, 19)

real-life applications

proof engineering
https://arxiv.org/abs/2003.06458

# W11 (Mar 24, 26)

* greybox fuzzing
https://www.fuzzingbook.org/html/GreyboxFuzzer.html

* fuzzing with grammars
https://www.fuzzingbook.org/html/Grammars.html


concurrency
undefined behaviour

# W12 (Mar 31, Apr 2)


refactoring code for testability, refactoring tests
metamorphic testing
security, library upgrades

leftovers:
continuous integration, code review, filing bug reports

how to debug?


---


# W02

WHILE language
Derivations
Semantics (big-step, small-step) and states
CFGs, paths
SSA form

# W03

testing
statement/branch coverage & infeasible TRs
unit tests
mutation testing

# W04

Fuzzing
Address Sanitizer (e.g. shadow memory)

# W05

Symbolic Execution
* collect path conditions, use z3 to find how to enter
* symbolic states

Z3 and SMT

# W06

Dynamic Symbolic Execution: DART and EXE
Concretization

# W07

Semantics of Symbolic Execution
Propositional Logic
- validity/unsatisfiability
- structural induction
- normal forms
- resolution
- soundness and completeness

# W08

First Order Logic
- models
- inference rules
- theories, T-satisfiability, T-validity

# W09

Hoare Logic
- Hoare triples, weakest precondition, strongest postcondition
- rule of consequence
- derivations
- loop invariants

# W10/11

Dafny
- write preconditions, postconditions
- write loop invariants
---

notes for next time
A1Q2: says notes but really wlang/ast.py is the better reference.
